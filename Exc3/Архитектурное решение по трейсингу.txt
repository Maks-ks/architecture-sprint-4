1. Анализ
    Заказ может сломаться и зависнуть в следующих местах:
        - Shop API
        - CRM API
        - MES API
    Список данных, которые должны попадать в трейсинг:
        - идентификатор текущей операции (trace_id)
        - идентификатор подзапроса (span_id)
        - идентификатор текущего сервиса (service_name)
        - название окружения (env_name)
        - время начала (start time)
        - время окончания (end time)
        - время обработки (duration)

2. Мотивация
    В текущей реализации, система состоит из нескольких компонент, которые влияют на заказы и их жизненный цикл.
Есть жалобы на то что заказы не выполняются вовремя, но нет понимания, на каком этапе и в каком месте это происходит.
    Внедрение трейсинга поможет отследить все запросы и их последовательность в системе и исправить ситуацию, получив древовидный список вызовов
по которому можно понять, чем оборвалась цепочка и где застрял заказ.
    Трейсинг помогает быстро понять причины медленной работы сервиса, плюс ко всему любое исключение или ошибка фиксируется вместе с контекстом запроса.
Визуализация данных и интерактивный UI также способствуют быстрому поиску проблем.

3. Предлагаемое решение
    Предлагается доработать Shop API, CRM API, MES API для поддержки платформы реализации трейсинга OpenTelemetry.
Для визуализации трейсинга - использовать инструмент Jaeger.
    Схема решения представлена в диаграмме C4 jewerly_c4_model.drawio расположенной в текущей папке.

4. Компромиссы
    Внедрение трейсинга оправдано для крупных распределенных систем, где много компонентов, которые взаимодействуют друг с другом.
Для небольших проектов или монолитных систем, проще и дешевле реализовать расширенное логирование.

5. Аспекты безопасности
    Система трейсинга будет недоступна извне, так как в этом нет необходимости. Безопасность будет осуществлена средствами корпоративного файрвола и сетевыми настройками.
Внутри компании к ресурсам Jaeger смогут обращаться только аутентифицированные пользователи, имеющие соответствующие права. 
 